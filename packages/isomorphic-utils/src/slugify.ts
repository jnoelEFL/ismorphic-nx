/* eslint-disable max-len */
const a =
  // eslint-disable-next-line max-len
  'àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźżÀÁÂÄÆÃÅĀĂĄÇĆČĐĎÈÉÊËĒĖĘĚĞǴḦÎÏÍĪĮÌŁḾÑŃǸŇÔÖÒÓŒØŌÕŐṔŔŘSSŚŠŞȘŤȚÛÜÙÚŪǗŮŰŲẂẌŸÝŽŹŻ·/_,:;’"\'';
const b =
  // eslint-disable-next-line max-len
  'aaaaaaaaaacccddeeeeeeeegghiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzzAAAAAAAAAACCCDDEEEEEEEEGGHIIIIIILMNNNNOOOOOOOOOPRRSSSSSSTTUUUUUUUUUWXYYZZZ---------';
const p = new RegExp(a.split('').join('|'), 'g');

const STOP_WORDS = [
  'a',
  'ainsi',
  'alors',
  'apres',
  'assez',
  'au',
  'aucun',
  'auparavant',
  'aussi',
  'aussitot',
  'autant',
  'autre',
  'autrefois',
  'autrement',
  'avant',
  'avec',
  'avoir',
  'beaucoup',
  'bien',
  'bientot',
  'bon',
  'c',
  'ca',
  'car',
  'carrement',
  'ce',
  'cela',
  'cependant',
  'certainement',
  'certes',
  'ces',
  'ceux',
  'chaque',
  'ci',
  'comme',
  'comment',
  'completement',
  'd',
  'dans',
  'davantage',
  'de',
  'debut',
  'dedans',
  'dehors',
  'deja',
  'dela',
  'depuis',
  'derechef',
  'des',
  'desormais',
  'deux',
  'devrait',
  'diablement',
  'divinement',
  'doit',
  'donc',
  'dorenavant',
  'dos',
  'drolement',
  'du',
  'elle',
  'elles',
  'en',
  'encore',
  'enfin',
  'ensuite',
  'environ',
  'est',
  'et',
  'etaient',
  'ete',
  'etions',
  'etre',
  'eu',
  'fait',
  'faites',
  'fois',
  'font',
  'guere',
  'haut',
  'hier',
  'hors',
  'ici',
  'il',
  'ils',
  'jadis',
  'jamais',
  'je',
  'joliment',
  'juste',
  'l',
  'la',
  'le',
  'les',
  'leur',
  'leurs',
  'lol',
  'lors',
  'ma',
  'mais',
  'meme',
  'mes',
  'mien',
  'moins',
  'mon',
  'mot',
  'naguere',
  'ne',
  'ni',
  'nommes',
  'non',
  'notre',
  'nous',
  'nullement',
  'ou',
  'oui',
  'par',
  'parce',
  'parfois',
  'pas',
  'peu',
  'peut',
  'plupart',
  'plus',
  'plutot',
  'point',
  'pour',
  'pourquoi',
  'presque',
  'prou',
  'puis',
  'quand',
  'quasi',
  'qu',
  'que',
  'quel',
  'quelle',
  'quelles',
  'quelque',
  'quelquefois',
  'quels',
  'qui',
  'rien',
  'rudement',
  's',
  'sa',
  'sans',
  'ses',
  'seulement',
  'si',
  'sien',
  'sitot',
  'soit',
  'son',
  'sont',
  'soudain',
  'sous',
  'souvent',
  'soyez',
  'sur',
  't',
  'ta',
  'tandis',
  'tant',
  'tantot',
  'tard',
  'tellement',
  'tels',
  'tes',
  'ton',
  'tot',
  'toujours',
  'tous',
  'tout',
  'toutefois',
  'tres',
  'trop',
  'tu',
  'un',
  'une',
  'vers',
  'voient',
  'volontiers',
  'vont',
  'votre',
  'vous',
  'vraiment',
  'vu'
].map(
  s => s.replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters
);

const STOP_WORDS_SET = new Set(STOP_WORDS);

export const slugify = (string: string): string => {
  return string
    .toString()
    .replace(/\s+/g, '-') // Replace spaces with -
    .replace(/\([^()]*\)/g, '') // remove any thing in parenthesis
    .replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters
    .replace(/([a-z])([A-Z])/g, '$1-$2') // replace camelcase by -
    .toLowerCase()
    .replace(/&/g, '-and-') // Replace & with 'and'
    .replace(/[^\w-]+/g, '') // Remove all non-word characters
    .split('-')
    .filter(part => part && !STOP_WORDS_SET.has(part))
    .join('-')
    .replace(/--+/g, '-') // remove keywords
    .replace(/--+/g, '-') // Replace multiple - with single -
    .replace(/^-+/, '') // Trim - from start of text
    .replace(/-+$/, ''); // Trim - from end of text
};
